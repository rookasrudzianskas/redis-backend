import Schema from "../schema/schema";
import Client from "../client";
import Entity from "../entity/entity";
import { Search, RawSearch } from '../search/search';
import { EntityData } from "../entity/entity";
import { Point } from "../schema/schema-definitions";
export declare type EntityCreationData = Record<string, number | boolean | string | string[] | Point | Date | null>;
export default abstract class Repository<TEntity extends Entity> {
    protected client: Client;
    private schema;
    constructor(schema: Schema<TEntity>, client: Client);
    createIndex(): Promise<void>;
    dropIndex(): Promise<void>;
    createEntity(data?: EntityCreationData): TEntity;
    save(entity: TEntity): Promise<string>;
    createAndSave(data?: EntityCreationData): Promise<TEntity>;
    fetch(id: string): Promise<TEntity>;
    remove(id: string): Promise<void>;
    expire(id: string, ttlInSeconds: number): Promise<void>;
    search(): Search<TEntity>;
    searchRaw(query: string): RawSearch<TEntity>;
    protected abstract writeEntity(key: string, data: EntityData): Promise<void>;
    protected abstract readEntity(key: string): Promise<EntityData>;
    protected makeKey(id: string): string;
}
export declare class HashRepository<TEntity extends Entity> extends Repository<TEntity> {
    private converter;
    constructor(schema: Schema<TEntity>, client: Client);
    protected writeEntity(key: string, data: EntityData): Promise<void>;
    protected readEntity(key: string): Promise<EntityData>;
}
export declare class JsonRepository<TEntity extends Entity> extends Repository<TEntity> {
    private converter;
    constructor(schema: Schema<TEntity>, client: Client);
    protected writeEntity(key: string, data: EntityData): Promise<void>;
    protected readEntity(key: string): Promise<EntityData>;
}
