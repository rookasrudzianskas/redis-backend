import Schema from "../schema/schema";
import Client from "../client";
import Entity from '../entity/entity';
import WhereField from './where-field';
import { SortOptions } from "../client";
export declare type SubSearchFunction<TEntity extends Entity> = (search: Search<TEntity>) => Search<TEntity>;
export declare abstract class AbstractSearch<TEntity extends Entity> {
    protected schema: Schema<TEntity>;
    protected client: Client;
    protected sort?: SortOptions;
    constructor(schema: Schema<TEntity>, client: Client);
    abstract get query(): string;
    sortAscending(field: string): AbstractSearch<TEntity>;
    sortDesc(field: string): AbstractSearch<TEntity>;
    sortDescending(field: string): AbstractSearch<TEntity>;
    sortAsc(field: string): AbstractSearch<TEntity>;
    sortBy(field: string, order?: 'ASC' | 'DESC'): AbstractSearch<TEntity>;
    min(field: string): Promise<TEntity>;
    max(field: string): Promise<TEntity>;
    count(): Promise<number>;
    page(offset: number, count: number): Promise<TEntity[]>;
    first(): Promise<TEntity>;
    all(options?: {
        pageSize: number;
    }): Promise<TEntity[]>;
    get return(): AbstractSearch<TEntity>;
    returnMin(field: string): Promise<TEntity>;
    returnMax(field: string): Promise<TEntity>;
    returnCount(): Promise<number>;
    returnPage(offset: number, count: number): Promise<TEntity[]>;
    returnAll(options?: {
        pageSize: number;
    }): Promise<TEntity[]>;
    returnFirst(): Promise<TEntity>;
    private callSearch;
}
export declare class RawSearch<TEntity extends Entity> extends AbstractSearch<TEntity> {
    private rawQuery;
    constructor(schema: Schema<TEntity>, client: Client, query?: string);
    get query(): string;
}
export declare class Search<TEntity extends Entity> extends AbstractSearch<TEntity> {
    private rootWhere?;
    get query(): string;
    where(field: string): WhereField<TEntity>;
    where(subSearchFn: SubSearchFunction<TEntity>): Search<TEntity>;
    and(field: string): WhereField<TEntity>;
    and(subSearchFn: SubSearchFunction<TEntity>): Search<TEntity>;
    or(field: string): WhereField<TEntity>;
    or(subSearchFn: SubSearchFunction<TEntity>): Search<TEntity>;
    private anyWhere;
    private anyWhereForField;
    private anyWhereForFunction;
    private createWhere;
}
