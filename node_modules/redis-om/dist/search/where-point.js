"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Circle = void 0;
const where_field_1 = __importDefault(require("./where-field"));
class Circle {
    constructor() {
        this.longitudeOfOrigin = 0;
        this.latitudeOfOrigin = 0;
        this.size = 1;
        this.units = 'm';
    }
    longitude(value) {
        this.longitudeOfOrigin = value;
        return this;
    }
    latitude(value) {
        this.latitudeOfOrigin = value;
        return this;
    }
    origin(pointOrLongitude, latitude) {
        if (typeof (pointOrLongitude) === 'number' && latitude !== undefined) {
            this.longitudeOfOrigin = pointOrLongitude;
            this.latitudeOfOrigin = latitude;
        }
        else {
            let point = pointOrLongitude;
            this.longitudeOfOrigin = point.longitude;
            this.latitudeOfOrigin = point.latitude;
        }
        return this;
    }
    radius(size) {
        this.size = size;
        return this;
    }
    get m() { return this.meters; }
    get meter() { return this.meters; }
    get meters() {
        this.units = 'm';
        return this;
    }
    get km() { return this.kilometers; }
    ;
    get kilometer() { return this.kilometers; }
    get kilometers() {
        this.units = 'km';
        return this;
    }
    get ft() { return this.feet; }
    ;
    get foot() { return this.feet; }
    get feet() {
        this.units = 'ft';
        return this;
    }
    get mi() { return this.miles; }
    ;
    get mile() { return this.miles; }
    get miles() {
        this.units = 'mi';
        return this;
    }
}
exports.Circle = Circle;
class WherePoint extends where_field_1.default {
    constructor() {
        super(...arguments);
        this.circle = new Circle();
    }
    inRadius(circleFn) {
        return this.inCircle(circleFn);
    }
    inCircle(circleFn) {
        this.circle = circleFn(this.circle);
        return this.search;
    }
    toString() {
        let { longitudeOfOrigin, latitudeOfOrigin, size, units } = this.circle;
        return this.buildQuery(`[${longitudeOfOrigin} ${latitudeOfOrigin} ${size} ${units}]`);
    }
}
exports.default = WherePoint;
